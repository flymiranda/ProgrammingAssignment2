cube <- function(x, n)
{}
cube <- function(x, n) { x^3}
cube(3)
x <- 1:10
if(x > 5) { x <- 0}
f <- function(x) { }
f <- function(x) { }
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x <3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
head(iris)
?iris
x <- which(iris$Species=='virginica')
x
iris[which(iris$Species=='virginica')]
iris[which(iris$Species=='virginica'),]
d1 <- iris[which(iris$Species=='virginica'),]
mean(d1$Special.Length)
mean(d1$Sepal.Length)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
nrow(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429 - 82.63636
debug(ls)
ls
setwd("D:/temp/git/ProgrammingAssignment2-/ProgrammingAssignment2")
source("cachematrix.R")
x <- c(1,2,3,4)
y <- c(1,2,3,4)
v <- matrix(x,y)
v
v <- rbind(x,y)
v
cacheSolve(v)
solve(v)
x <- c(1,2)
y <- c(3,4)
v <- rbind(x,y)
v
makeCacheMatrix(v)
cacheSolve(v)
source("cacheTest.R")
x<-c(1,2,3,4)
makeVector(x)
cachemean(x)
is.recursive(x)
is.atomic(x)
l <- makeVector(x)
cachemean(l)
source("cachematrix.R")
x <- c(1,2)
y <- c(3,4)
v <- rbind(x,y)
v
l <- makeCacheMatrix(v)
cacheSolve(l)
cacheSolve(l)
solve(v)
